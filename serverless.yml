service: local-step-function

plugins:
  - serverless-step-functions-local
  - serverless-step-functions
  - serverless-offline-lambda
  - serverless-offline
  

provider:
  name: aws
  runtime: nodejs14.x # supported nodejs versions: https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html


custom:
  serverless-offline:
    httpPort: 3002 # Change this to the desired port
  stepFunctionsLocal:
    accountId: 101010101010
    region: us-east-1
    lambda_endpoint: localhost:3002
    TaskResourceMapping:
      ChoicePath1: arn:aws:lambda:us-east-1:101010101010:function:${self:service}-${opt:stage, self:provider.stage}-hello
      ChoicePath2: arn:aws:lambda:us-east-1:101010101010:function:${self:service}-${opt:stage, self:provider.stage}-world
    

functions:
  hello:
    handler: handler.hello
  world:
    handler: handler.world
  


stepFunctions:
  stateMachines:
    WaitMachine:
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: FirstState
        States:
          FirstState:
            Type: Choice
            Choices:
              - Variable: "$.inputVariable"  # Variable to evaluate
                NumericEquals: 10           # Condition to evaluate
                Next: ChoicePath1           # Next state if condition is true
              - Variable: "$.inputVariable"
                NumericEquals: 30
                Next: ChoicePath2
          ChoicePath1:
            Type: Task
            Resource: 
              Fn::GetAtt: [hello, Arn]
            End: true
          ChoicePath2:
            Type: Task
            Resource: 
              Fn::GetAtt: [world, Arn]
            End: true
