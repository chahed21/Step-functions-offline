service: local-step-function

plugins:
  - serverless-step-functions-local
  - serverless-step-functions
  - serverless-offline-lambda
  - serverless-offline
  

provider:
  name: aws
  runtime: nodejs14.x # supported nodejs versions: https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html


custom:
  serverless-offline:
    httpPort: 3002 # Change this to the desired port
  stepFunctionsLocal:
    accountId: 101010101010
    region: us-east-1
    TaskResourceMapping:
      second_task: arn:aws:lambda:us-east-1:101010101010:function:${self:service}-${opt:stage, self:provider.stage}-there
      FinalState: arn:aws:lambda:us-east-1:101010101010:function:${self:service}-${opt:stage, self:provider.stage}-world
    



functions:
  hello:
    handler: handler.hello
  world:
    handler: handler.world
  there:
    handler: handler.there
  

stepFunctions:
  stateMachines:
    WaitMachine:
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: FirstState
        States:
          FirstState:
            Type: Parallel
            End: true
            Branches:
              - StartAt: second_task
                States:
                  second_task:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [there, Arn]
                    End: true
              - StartAt: FinalState
                States:
                  FinalState:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [world, Arn]
                    End: true

